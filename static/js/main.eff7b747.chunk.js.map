{"version":3,"sources":["components/todoApp/TodoList.js","components/todoApp/TodoApp.js","reducer/todo.js","store.js","App.js","serviceWorker.js","index.js"],"names":["TodoList","dispatch","useDispatch","todos","useSelector","state","map","todo","index","key","className","onClick","type","payload","TodoApp","useState","value","setValue","onSubmit","event","preventDefault","name","placeholder","onChange","target","console","log","initialState","store","createStore","action","filter","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wNAwBeA,EArBE,WAChB,IAAMC,EAAWC,cACXC,EAAQC,aAAY,SAACC,GAAD,OAAWA,EAAMF,SAE3C,OACC,6BACC,4BACEA,EAAMG,KAAI,SAACC,EAAMC,GAAP,OACV,wBAAIC,IAAKD,GACPD,EAAM,IACP,uBACCG,UAAU,mBACVC,QAAS,kBAAMV,EAAS,CAAEW,KAAM,cAAeC,QAASL,OACtD,WCgBMM,EA3BC,WAAO,IAAD,EACOC,mBAAS,IADhB,mBACbC,EADa,KACNC,EADM,KAEfhB,EAAWC,cAcjB,OACC,yBAAKQ,UAAU,kBACd,0BAAMA,UAAU,gBAAgBQ,SAThB,SAACC,GAClBA,EAAMC,iBACQ,KAAVJ,IACJf,EAAS,CAAEW,KAAM,WAAYC,QAASG,IACtCC,EAAS,OAMP,uCACA,2BAAOL,KAAK,OAAOS,KAAK,QAAQC,YAAY,cAAcN,MAAOA,EAAOO,SAjB1D,SAACJ,GACjBA,EAAMC,iBACNH,EAASE,EAAMK,OAAOR,OACtBS,QAAQC,IAAIV,OAgBX,kBAAC,EAAD,Q,sBC3BGW,EAAe,CACpBxB,MAAO,ICIOyB,EAFDC,aDCC,WAAwC,IAA/BxB,EAA8B,uDAAtBsB,EAAcG,EAAQ,uCAC7ClB,EAAkBkB,EAAlBlB,KAAMC,EAAYiB,EAAZjB,QACd,OAAQD,GACP,IAAK,WACJ,OAAO,2BACHP,GADJ,IAECF,MAAM,GAAD,mBAAOE,EAAMF,OAAb,CAAoBU,MAE3B,IAAK,cACJ,OAAO,2BACHR,GADJ,IAECF,MAAM,YAAME,EAAMF,MAAM4B,QAAO,SAACxB,EAAMC,GAAP,OAAiBA,IAAUK,QAE5D,QACC,OAAOR,MEHK2B,MAVf,WACC,OACC,kBAAC,IAAD,CAAUJ,MAAOA,GAChB,6BACC,kBAAC,EAAD,SCGgBK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDyHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.eff7b747.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nconst TodoList = () => {\r\n\tconst dispatch = useDispatch();\r\n\tconst todos = useSelector((state) => state.todos);\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<ul>\r\n\t\t\t\t{todos.map((todo, index) => (\r\n\t\t\t\t\t<li key={index}>\r\n\t\t\t\t\t\t{todo}{' '}\r\n\t\t\t\t\t\t<i\r\n\t\t\t\t\t\t\tclassName='fas fa-trash-alt'\r\n\t\t\t\t\t\t\tonClick={() => dispatch({ type: 'REMOVE_TODO', payload: index })}\r\n\t\t\t\t\t\t/>{' '}\r\n\t\t\t\t\t</li>\r\n\t\t\t\t))}\r\n\t\t\t</ul>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default TodoList;\r\n","import React, { useState } from 'react';\r\nimport '../../App.css';\r\nimport TodoList from '../todoApp/TodoList';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nconst TodoApp = () => {\r\n\tconst [ value, setValue ] = useState('');\r\n\tconst dispatch = useDispatch();\r\n\tconst getValue = (event) => {\r\n\t\tevent.preventDefault();\r\n\t\tsetValue(event.target.value);\r\n\t\tconsole.log(value);\r\n\t};\r\n\r\n\tconst storeItem = (event) => {\r\n\t\tevent.preventDefault();\r\n\t\tif (value === '') return;\r\n\t\tdispatch({ type: 'ADD_TODO', payload: value });\r\n\t\tsetValue('');\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className='todo-container'>\r\n\t\t\t<form className='input-section' onSubmit={storeItem}>\r\n\t\t\t\t<h1>TodoApp</h1>\r\n\t\t\t\t<input type='text' name='input' placeholder='enter items' value={value} onChange={getValue} />\r\n\t\t\t</form>\r\n\t\t\t<TodoList />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default TodoApp;\r\n","const initialState = {\r\n\ttodos: []\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n\tconst { type, payload } = action;\r\n\tswitch (type) {\r\n\t\tcase 'ADD_TODO':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\ttodos: [ ...state.todos, payload ]\r\n\t\t\t};\r\n\t\tcase 'REMOVE_TODO':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\ttodos: [ ...state.todos.filter((todo, index) => index !== payload) ]\r\n\t\t\t};\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n","import { createStore } from 'redux';\r\nimport todo from './reducer/todo';\r\n\r\nconst store = createStore(todo);\r\n\r\nexport default store;\r\n","import React from 'react';\nimport TodoApp from './components/todoApp/TodoApp';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nfunction App() {\n\treturn (\n\t\t<Provider store={store}>\n\t\t\t<div>\n\t\t\t\t<TodoApp />\n\t\t\t</div>\n\t\t</Provider>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}